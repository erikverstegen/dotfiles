#!/usr/bin/env bash

info() {
    if [[ ! $quiet ]]; then
        printf "\33[34m${1}\33[0m\n"
    fi
}

success() {
    if [[ ! $quiet ]]; then
        printf "\33[32m${1}\33[0m\n"
    fi
}

error() {
    printf "\33[31m${1}\33[0m\n"
}

# Creates or replaces a symbolic link.
link() {
    ln -fs "${HOME}/.dotfiles/${1}" "${HOME}/${2}" &>/dev/null
}

# Test for command line arguments.
for arg in $@
do
    case $arg in
        -h|--help)
            printf "Usage:\n"
            printf "  $(basename "$0") [options]\n"
            printf "\n"
            printf "Options:\n"
            printf "  -h, --help    Display this help information.\n"
            printf "  -q, --quiet   Don't display output, except for errors.\n"
            printf "      --no-sync Don't sync with the remote repository.\n"
            printf "\n"
            printf "Documentation can be found at https://github.com/erikverstegen/dotfiles.\n"
            printf "\n"
            printf "Copyright (c) Erik Verstegen.\n"
            printf "Licensed under the terms of the MIT license.\n"

            exit 0
        ;;

        -q|--quiet)
            quiet=true
        ;;

        --no-sync)
            no_sync=true
        ;;

        -*|--*)
            error "Unrecognized argument \"${arg}\"."

            exit 1
        ;;
    esac
done

# Download the .dotfiles from the Git repository, if the directory does not
# exist.
if [[ ! -d "${HOME}/.dotfiles" ]]; then
    info "Downloading the .dotfiles..."

    {
        mkdir -p "${HOME}/.dotfiles";
        curl -fsSLo "${HOME}/.dotfiles.tar.gz" "https://github.com/erikverstegen/dotfiles/tarball/master";
        tar -xf "${HOME}/.dotfiles.tar.gz" --strip-components 1 -C "${HOME}/.dotfiles";
        rm -rf "${HOME}/.dotfiles.tar.gz";
    } &>/dev/null
fi

cd "${HOME}/.dotfiles"

# Test whether the user is running a supported operating system.
if [ ! -f "./install/$(uname).sh" ]; then
    error "Running on an unsupported operating system ($(uname)). Aborting."

    exit 1
fi

info "Installing the .dotfiles..."

# Install the Xcode Command Line Tools when running on macOS.
if [[ "$(uname)" == "Darwin" ]]; then
    source ./install/darwin/xcode_tools.sh
fi

# Initialize the Git repository if necessary.
if ! $(git rev-parse --is-inside-work-tree &>/dev/null); then
    info "Initializing the Git repository..."

    {
        git init;
        git remote add origin "https://github.com/erikverstegen/dotfiles.git";
        git fetch origin master;
        git reset --hard FETCH_HEAD;
        git clean -fd;
        git submodule update --init --recursive;
    } &>/dev/null
fi

# Pull from the remote Git repository.
if ! $no_sync; then
    info "Syncing with the remote Git repository..."

    git pull -qr origin master &>/dev/null
fi

# Create the symbolic links.
info "Creating the symbolic links..."

link "tmux/.tmux.conf" ".tmux.conf"
link "vim/.vimrc" ".vimrc"
link "zsh/.zshrc" ".zshrc"

# Download `vim-plug`.
if [[ ! -f ~/.vim/autoload/plug.vim ]]; then
    info "Downloading \"vim-plug\"..."

    curl -fsLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim &>/dev/null
fi

# Install Vim plugins.
if [[ ! -d ~/.vim/plugged ]]; then
    info "Installing Vim plugins..."

    vim +PlugInstall +qall &>/dev/null
else
    info "Updating Vim plugins..."

    vim +PlugUpdate +qall &>/dev/null
fi

# Run the OS-related scripts.
source ./install/$(uname).sh

# Change the shell to Zsh.
if [ ! "$SHELL" == "$(which zsh)" ]; then
    info "Changing the shell to Zsh..."

    if [[ "$(uname)" == "Darwin" && ! "$(cat /etc/shells | grep $(which zsh))" ]]; then
        info "Adding \"$(which zsh)\" to \"/etc/shells\"..."

        command -v zsh | sudo tee -a /etc/shells &>/dev/null
    fi

    chsh -s $(which zsh)
fi

success "Finished installing the .dotfiles."
